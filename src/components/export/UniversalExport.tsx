// @ts-nocheck
// Universal Export & Deployment UI Component
// Comprehensive interface for exporting µLM workflows to multiple formats

import React, { useState, useEffect, useCallback } from 'react';
import { Node, Edge } from 'reactflow';
import {
  Download,
  Package,
  Cloud,
  Server,
  BookOpen,
  Smartphone,
  Container,
  Settings,
  CheckCircle,
  AlertCircle,
  Loader2,
  ExternalLink,
  Copy,
  FileText,
  Code,
  Rocket,
  Shield,
  Zap,
  Monitor,
  Globe,
  Database,
  GitBranch,
  Play,
  Pause,
  RotateCcw,
  Eye,
  ArrowRight,
  ChevronDown,
  ChevronRight,
  X,
  Info,
  Star,
  Layers
} from 'lucide-react';
import { 
  universalExportService,
  ExportOptions,
  ExportFormat,
  ExportResult,
  TargetEnvironment,
  DeploymentConfig
} from '../../export/UniversalExportService';

interface UniversalExportProps {
  nodes: Node[];
  edges: Edge[];
  isOpen: boolean;
  onClose: () => void;
  workflowName: string;
}

interface FormatOption {
  id: ExportFormat;
  name: string;
  description: string;
  icon: React.ElementType;
  complexity: 'simple' | 'moderate' | 'advanced';
  useCase: string;
  estimatedTime: string;
  features: string[];
}

const formatOptions: FormatOption[] = [
  {
    id: 'python-package',
    name: 'Python Package',
    description: 'Complete pip-installable library with CLI interface',
    icon: Package,
    complexity: 'moderate',
    useCase: 'Distribution and reuse',
    estimatedTime: '2-3 minutes',
    features: ['CLI Interface', 'Unit Tests', 'Documentation', 'PyPI Ready']
  },
  {
    id: 'huggingface-space',
    name: 'HuggingFace Space',
    description: 'Interactive Gradio app with model card',
    icon: Globe,
    complexity: 'simple',
    useCase: 'Public demos and sharing',
    estimatedTime: '1-2 minutes',
    features: ['Interactive UI', 'Model Card', 'Public Access', 'Auto Deploy']
  },
  {
    id: 'fastapi-service',
    name: 'FastAPI Microservice',
    description: 'Production-ready API with documentation',
    icon: Server,
    complexity: 'advanced',
    useCase: 'Production deployment',
    estimatedTime: '3-5 minutes',
    features: ['REST API', 'OpenAPI Docs', 'Authentication', 'Rate Limiting']
  },
  {
    id: 'jupyter-notebook',
    name: 'Jupyter Notebook',
    description: 'Educational format with step-by-step explanation',
    icon: BookOpen,
    complexity: 'simple',
    useCase: 'Research and education',
    estimatedTime: '1-2 minutes',
    features: ['Interactive Cells', 'Visualizations', 'Educational', 'Reproducible']
  },
  {
    id: 'edge-deployment',
    name: 'Edge Deployment',
    description: 'Optimized for mobile/IoT with ONNX conversion',
    icon: Smartphone,
    complexity: 'advanced',
    useCase: 'Mobile and IoT devices',
    estimatedTime: '5-10 minutes',
    features: ['ONNX/TFLite', 'Optimized', 'Offline Ready', 'Low Latency']
  },
  {
    id: 'docker-container',
    name: 'Docker Container',
    description: 'Containerized deployment with all dependencies',
    icon: Container,
    complexity: 'moderate',
    useCase: 'Containerized deployment',
    estimatedTime: '2-4 minutes',
    features: ['Isolated Environment', 'Easy Deploy', 'Scalable', 'Portable']
  }
];

const targetEnvironments: { id: TargetEnvironment; name: string; description: string; icon: React.ElementType }[] = [
  { id: 'cloud', name: 'Cloud', description: 'AWS, GCP, Azure deployment', icon: Cloud },
  { id: 'edge', name: 'Edge', description: 'Edge computing devices', icon: Zap },
  { id: 'mobile', name: 'Mobile', description: 'iOS/Android applications', icon: Smartphone },
  { id: 'web', name: 'Web', description: 'Web applications', icon: Globe },
  { id: 'desktop', name: 'Desktop', description: 'Desktop applications', icon: Monitor },
  { id: 'iot', name: 'IoT', description: 'Internet of Things devices', icon: Database }
];

export const UniversalExport: React.FC<UniversalExportProps> = ({
  nodes,
  edges,
  isOpen,
  onClose,
  workflowName
}) => {
  const [selectedFormat, setSelectedFormat] = useState<ExportFormat>('python-package');
  const [exportOptions, setExportOptions] = useState<ExportOptions>({
    format: 'python-package',
    name: workflowName || 'my-workflow',
    description: 'AI workflow generated by µLM',
    version: '1.0.0',
    author: 'µLM User',
    license: 'MIT',
    includeTests: true,
    includeDocs: true,
    optimizationLevel: 'production',
    targetEnvironment: 'cloud',
    deploymentConfig: {}
  });
  const [isExporting, setIsExporting] = useState(false);
  const [exportResult, setExportResult] = useState<ExportResult | null>(null);
  const [activeStep, setActiveStep] = useState<'format' | 'config' | 'export' | 'result'>('format');
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['basic']));

  // Update options when format changes
  useEffect(() => {
    const defaultOptions = universalExportService.getDefaultOptions(selectedFormat);
    setExportOptions(prev => ({
      ...prev,
      format: selectedFormat,
      deploymentConfig: { ...prev.deploymentConfig, ...defaultOptions.deploymentConfig }
    }));
  }, [selectedFormat]);

  const handleExport = async () => {
    setIsExporting(true);
    setActiveStep('export');
    
    try {
      const result = await universalExportService.exportWorkflow(nodes, edges, exportOptions);
      setExportResult(result);
      setActiveStep('result');
    } catch (error) {
      console.error('Export failed:', error);
      setExportResult({
        success: false,
        format: selectedFormat,
        files: [],
        deploymentInstructions: '',
        verificationSteps: [],
        errors: [error instanceof Error ? error.message : 'Unknown error']
      });
      setActiveStep('result');
    } finally {
      setIsExporting(false);
    }
  };

  const toggleSection = (section: string) => {
    const newExpanded = new Set(expandedSections);
    if (newExpanded.has(section)) {
      newExpanded.delete(section);
    } else {
      newExpanded.add(section);
    }
    setExpandedSections(newExpanded);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-6xl h-full max-h-[90vh] flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
              <Download className="w-6 h-6 text-blue-600 dark:text-blue-400" />
            </div>
            <div>
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
                Universal Export & Deployment
              </h2>
              <p className="text-gray-600 dark:text-gray-300">
                Export your workflow to multiple formats and deployment targets
              </p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
          >
            <X className="w-6 h-6 text-gray-500" />
          </button>
        </div>

        {/* Progress Steps */}
        <div className="flex items-center justify-center p-4 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center space-x-4">
            {[
              { id: 'format', name: 'Format', icon: Layers },
              { id: 'config', name: 'Configure', icon: Settings },
              { id: 'export', name: 'Export', icon: Rocket },
              { id: 'result', name: 'Deploy', icon: CheckCircle }
            ].map((step, index) => {
              const isActive = activeStep === step.id;
              const isCompleted = ['format', 'config', 'export'].indexOf(activeStep) > ['format', 'config', 'export'].indexOf(step.id);
              const StepIcon = step.icon;

              return (
                <React.Fragment key={step.id}>
                  <div className={`flex items-center space-x-2 px-3 py-2 rounded-lg ${
                    isActive ? 'bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400' :
                    isCompleted ? 'bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-400' :
                    'text-gray-400'
                  }`}>
                    <StepIcon className="w-4 h-4" />
                    <span className="text-sm font-medium">{step.name}</span>
                  </div>
                  {index < 3 && (
                    <ArrowRight className={`w-4 h-4 ${
                      isCompleted ? 'text-green-400' : 'text-gray-300'
                    }`} />
                  )}
                </React.Fragment>
              );
            })}
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-auto">
          {activeStep === 'format' && (
            <div className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Choose Export Format
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {formatOptions.map((format) => {
                  const Icon = format.icon;
                  const isSelected = selectedFormat === format.id;

                  return (
                    <div
                      key={format.id}
                      onClick={() => setSelectedFormat(format.id)}
                      className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                        isSelected
                          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                          : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                      }`}
                    >
                      <div className="flex items-start space-x-3">
                        <div className={`p-2 rounded-lg ${
                          isSelected 
                            ? 'bg-blue-100 dark:bg-blue-900' 
                            : 'bg-gray-100 dark:bg-gray-700'
                        }`}>
                          <Icon className={`w-5 h-5 ${
                            isSelected 
                              ? 'text-blue-600 dark:text-blue-400' 
                              : 'text-gray-600 dark:text-gray-400'
                          }`} />
                        </div>
                        <div className="flex-1">
                          <h4 className="font-semibold text-gray-900 dark:text-white">
                            {format.name}
                          </h4>
                          <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">
                            {format.description}
                          </p>
                          <div className="flex items-center space-x-4 mt-3 text-xs">
                            <span className={`px-2 py-1 rounded ${
                              format.complexity === 'simple' ? 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300' :
                              format.complexity === 'moderate' ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300' :
                              'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300'
                            }`}>
                              {format.complexity}
                            </span>
                            <span className="text-gray-500">{format.estimatedTime}</span>
                          </div>
                          <div className="mt-2">
                            <p className="text-xs text-gray-500 mb-1">Features:</p>
                            <div className="flex flex-wrap gap-1">
                              {format.features.slice(0, 2).map((feature, idx) => (
                                <span key={idx} className="text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">
                                  {feature}
                                </span>
                              ))}
                              {format.features.length > 2 && (
                                <span className="text-xs text-gray-500">
                                  +{format.features.length - 2} more
                                </span>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>

              <div className="flex justify-end mt-6">
                <button
                  onClick={() => setActiveStep('config')}
                  disabled={!selectedFormat}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  Configure Options
                </button>
              </div>
            </div>
          )}

          {activeStep === 'config' && (
            <div className="p-6 space-y-6">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                Configure Export Options
              </h3>

              {/* Basic Configuration */}
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                <button
                  onClick={() => toggleSection('basic')}
                  className="flex items-center justify-between w-full text-left"
                >
                  <h4 className="font-semibold text-gray-900 dark:text-white">Basic Configuration</h4>
                  {expandedSections.has('basic') ? 
                    <ChevronDown className="w-4 h-4" /> : 
                    <ChevronRight className="w-4 h-4" />
                  }
                </button>
                
                {expandedSections.has('basic') && (
                  <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Project Name
                      </label>
                      <input
                        type="text"
                        value={exportOptions.name}
                        onChange={(e) => setExportOptions(prev => ({ ...prev, name: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Version
                      </label>
                      <input
                        type="text"
                        value={exportOptions.version}
                        onChange={(e) => setExportOptions(prev => ({ ...prev, version: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
                      />
                    </div>
                    
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Description
                      </label>
                      <textarea
                        value={exportOptions.description}
                        onChange={(e) => setExportOptions(prev => ({ ...prev, description: e.target.value }))}
                        rows={3}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Author
                      </label>
                      <input
                        type="text"
                        value={exportOptions.author}
                        onChange={(e) => setExportOptions(prev => ({ ...prev, author: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        License
                      </label>
                      <select
                        value={exportOptions.license}
                        onChange={(e) => setExportOptions(prev => ({ ...prev, license: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
                      >
                        <option value="MIT">MIT</option>
                        <option value="Apache-2.0">Apache 2.0</option>
                        <option value="GPL-3.0">GPL 3.0</option>
                        <option value="BSD-3-Clause">BSD 3-Clause</option>
                        <option value="Unlicense">Unlicense</option>
                      </select>
                    </div>
                  </div>
                )}
              </div>

              {/* Target Environment */}
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                <h4 className="font-semibold text-gray-900 dark:text-white mb-3">Target Environment</h4>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                  {targetEnvironments.map((env) => {
                    const Icon = env.icon;
                    const isSelected = exportOptions.targetEnvironment === env.id;

                    return (
                      <button
                        key={env.id}
                        onClick={() => setExportOptions(prev => ({ ...prev, targetEnvironment: env.id }))}
                        className={`p-3 rounded-lg border text-left transition-all ${
                          isSelected
                            ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                            : 'border-gray-200 dark:border-gray-600 hover:border-gray-300'
                        }`}
                      >
                        <div className="flex items-center space-x-2">
                          <Icon className={`w-4 h-4 ${
                            isSelected ? 'text-blue-600 dark:text-blue-400' : 'text-gray-500'
                          }`} />
                          <span className={`font-medium ${
                            isSelected ? 'text-blue-600 dark:text-blue-400' : 'text-gray-700 dark:text-gray-300'
                          }`}>
                            {env.name}
                          </span>
                        </div>
                        <p className="text-xs text-gray-500 mt-1">{env.description}</p>
                      </button>
                    );
                  })}
                </div>
              </div>

              {/* Options */}
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                <h4 className="font-semibold text-gray-900 dark:text-white mb-3">Export Options</h4>
                <div className="space-y-3">
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={exportOptions.includeTests}
                      onChange={(e) => setExportOptions(prev => ({ ...prev, includeTests: e.target.checked }))}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-gray-700 dark:text-gray-300">Include unit tests</span>
                  </label>
                  
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={exportOptions.includeDocs}
                      onChange={(e) => setExportOptions(prev => ({ ...prev, includeDocs: e.target.checked }))}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-gray-700 dark:text-gray-300">Include documentation</span>
                  </label>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Optimization Level
                    </label>
                    <select
                      value={exportOptions.optimizationLevel}
                      onChange={(e) => setExportOptions(prev => ({ 
                        ...prev, 
                        optimizationLevel: e.target.value as 'development' | 'production' | 'edge'
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
                    >
                      <option value="development">Development</option>
                      <option value="production">Production</option>
                      <option value="edge">Edge Optimized</option>
                    </select>
                  </div>
                </div>
              </div>

              <div className="flex justify-between">
                <button
                  onClick={() => setActiveStep('format')}
                  className="px-6 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                >
                  Back
                </button>
                <button
                  onClick={handleExport}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Start Export
                </button>
              </div>
            </div>
          )}

          {activeStep === 'export' && (
            <div className="flex items-center justify-center h-full">
              <div className="text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                  Exporting Workflow...
                </h3>
                <p className="text-gray-600 dark:text-gray-300">
                  Generating {formatOptions.find(f => f.id === selectedFormat)?.name} export
                </p>
              </div>
            </div>
          )}

          {activeStep === 'result' && exportResult && (
            <div className="p-6">
              {exportResult.success ? (
                <div className="space-y-6">
                  <div className="flex items-center space-x-3 text-green-600 dark:text-green-400">
                    <CheckCircle className="w-6 h-6" />
                    <h3 className="text-lg font-semibold">Export Completed Successfully!</h3>
                  </div>

                  {/* Generated Files */}
                  <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                    <h4 className="font-semibold text-gray-900 dark:text-white mb-3">
                      Generated Files ({exportResult.files.length})
                    </h4>
                    <div className="space-y-2 max-h-40 overflow-y-auto">
                      {exportResult.files.map((file, index) => (
                        <div key={index} className="flex items-center justify-between p-2 bg-white dark:bg-gray-800 rounded border">
                          <div className="flex items-center space-x-2">
                            <FileText className="w-4 h-4 text-gray-500" />
                            <span className="text-sm font-medium text-gray-900 dark:text-white">
                              {file.path}
                            </span>
                            <span className={`text-xs px-2 py-1 rounded ${
                              file.type === 'source' ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300' :
                              file.type === 'config' ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300' :
                              file.type === 'docs' ? 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300' :
                              file.type === 'test' ? 'bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300' :
                              'bg-gray-100 text-gray-700 dark:bg-gray-900 dark:text-gray-300'
                            }`}>
                              {file.type}
                            </span>
                          </div>
                          <button
                            onClick={() => copyToClipboard(file.content)}
                            className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
                            title="Copy content"
                          >
                            <Copy className="w-4 h-4 text-gray-500" />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Deployment Instructions */}
                  <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                    <h4 className="font-semibold text-gray-900 dark:text-white mb-3">
                      Deployment Instructions
                    </h4>
                    <pre className="text-sm bg-gray-900 text-green-400 p-3 rounded overflow-x-auto">
                      {exportResult.deploymentInstructions}
                    </pre>
                  </div>

                  {/* Verification Steps */}
                  {exportResult.verificationSteps.length > 0 && (
                    <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                      <h4 className="font-semibold text-gray-900 dark:text-white mb-3">
                        Verification Steps
                      </h4>
                      <ol className="list-decimal list-inside space-y-2">
                        {exportResult.verificationSteps.map((step, index) => (
                          <li key={index} className="text-sm text-gray-700 dark:text-gray-300">
                            <code className="ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-800 rounded text-xs">
                              {step}
                            </code>
                          </li>
                        ))}
                      </ol>
                    </div>
                  )}
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="flex items-center space-x-3 text-red-600 dark:text-red-400">
                    <AlertCircle className="w-6 h-6" />
                    <h3 className="text-lg font-semibold">Export Failed</h3>
                  </div>
                  
                  {exportResult.errors && exportResult.errors.length > 0 && (
                    <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
                      <h4 className="font-semibold text-red-800 dark:text-red-300 mb-2">Errors:</h4>
                      <ul className="list-disc list-inside space-y-1">
                        {exportResult.errors.map((error, index) => (
                          <li key={index} className="text-sm text-red-700 dark:text-red-300">
                            {error}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  <button
                    onClick={() => setActiveStep('config')}
                    className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Try Again
                  </button>
                </div>
              )}

              <div className="flex justify-between mt-6">
                <button
                  onClick={() => {
                    setActiveStep('format');
                    setExportResult(null);
                  }}
                  className="px-6 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                >
                  New Export
                </button>
                <button
                  onClick={onClose}
                  className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                >
                  Close
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
